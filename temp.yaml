<center>ðŸ”Œ</center>
{% set target = states('input_number.car_charge_target_percentage') | round(default=0) %}
{% set soc = states('sensor.car_1_soc') | round(default=0) %}
{% set nog_te_laden_procent = [target - soc, 0] | max %}
{% set nog_te_laden_minuten = nog_te_laden_procent * states('input_number.minuten_voor_1_laden') | round(2) %}
{% set prod = (states('sensor.energy_production_today') | float(default=0) - (states('sensor.realised_sun_production_today') | float(default=0) ) ) | round(1) %}
{% set prodprocent = ( prod / 0.85 ) | int %}
{% if nog_te_laden_procent ==0 %} Er moet niet worden geladen.
{% else %}**<center>100%</center>**

  {% if states('input_boolean.car_charge_mode_sun') == 'off' and
  states('input_boolean.car_charge_mode_net') == 'on'%}

  <center>van {{soc}}% tot {{target}}%</center>

  **Timer**
  Van: {{ as_timestamp(states('sensor.car_charge_start_time'),0) |
  timestamp_custom('%a %d %b %-Hu%M', false) }}
  Tot : {{ state_attr('input_datetime.car_charge_target_time',
  'timestamp') | timestamp_custom('%a %d %b %-Hu%M',) }}

  {% elif states('input_boolean.car_charge_mode_net') == 'off' %}

  **<center><font color="red">0%</center>**<font color="black">

  {% elif states('input_boolean.car_charge_mode_sun') == 'on' and
  states('input_boolean.car_charge_mode_net') == 'on'%}
    {% if  (soc + prodprocent) <= target %}<center>{{ 100 - ( (prodprocent  / nog_te_laden_procent) * 100 ) | round(default=0)}}%</center>
    {% elif  (soc + prodprocent) > target %}<center>{{ 100 - (((target - soc) / nog_te_laden_procent) * 100 ) | round(default=0)}}%</center>
    {% endif %}

    {% if  (soc + prodprocent) >= target %}{% set netprocent = 0 %} Er hoeft niet van het net te worden geladen.
    {% else %}{% set netprocent = target - soc - prodprocent %} van **{{ soc + prodprocent }}%** tot **{{ target }}%**
    {% endif %}

    {% set nog_te_laden_procent = (states('input_number.car_charge_target_percentage') | float(default=0) ) - (states('sensor.car_1_soc') | float(default=0) ) %}
    {% set nog_te_laden_minuten = netprocent * states('input_number.minuten_voor_1_laden') | round(2) %}
    
    {% if  nog_te_laden_procent <= 0 %} Laaddoel {{ states('input_number.car_charge_target_percentage') | round(0) }}% al bereikt. <br>Er hoeft niet te worden geladen.
    {% elif  nog_te_laden_procent > 0 and netprocent > 0 %}

    **Timer**
    van {{ (state_attr('input_datetime.car_charge_target_time', 'timestamp') - nog_te_laden_minuten ) | timestamp_custom('%a %d %b %-Hu%M') }}
    tot {{ state_attr('input_datetime.car_charge_target_time', 'timestamp') | timestamp_custom('%a %d %b %-Hu%M',) }}
    
    {% elif  (as_timestamp(now()) + (nog_te_laden_minuten | float(default=0) * 60)) > state_attr('input_datetime.car_charge_target_time', 'timestamp') %}<font color="red"><ha-icon icon="mdi:battery-charging-medium"></ha-icon> Kan laaddoel {{states('input_number.car_charge_target_percentage')| round(default=0) }}% niet bereiken tegen {{ state_attr('input_datetime.car_charge_target_time', 'timestamp') | timestamp_custom("%Hu%M") }}.
    Kan wel **{{ ( ((state_attr('input_datetime.car_charge_target_time', 'timestamp') - as_timestamp(now())) / 60 / states('input_number.minuten_voor_1_laden') ) + (states('sensor.car_1_soc') |float(default=0) )) | round(default=0) }}%** bereiken.
    </font>
    {% endif %}

  {% endif %}
{% endif %}
