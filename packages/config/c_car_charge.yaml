input_select:
  car_charge_minimum_wattage:
    name: autolader minimum wattage
    options:
      - "1.4 kW (1 fase 6 ampère)"
      - "2.2 kW (1 fase 10 ampère)"
      - "4.0 kW (3 fasen 6 ampère)"
      - "5.3 kW (3 fasen 8 ampère)"
    icon: mdi:power

input_number:
  car_charge_minimum_wattage:
    name: autolader minimum wattage
    min: 1.3
    max: 8
    step: 0.1
    unit_of_measurement: kW
    mode: box

  car_charge_fixed_wattage:
    name: autolader vast wattage
    min: 1.3
    max: 8
    step: 0.1
    unit_of_measurement: kW
    mode: box

  car_charge_peak_netwattage:
    name: 'max. netverbruik (capaciteitstarief)'
    min: 0
    max: 5500
    step: 100
    unit_of_measurement: W
    mode: box

input_boolean:
  car_charge_mode_peak:

  car_charge_limit_netcapacity:
    name: beperk tot netcapaciteit
  
  car_charge_morning_net:
    name: laden 's morgens van net

  car_charge_day_sun:
    name: laden overdag met zon

  car_charge_day_net:
    name: laden overdag van net

  car_charge_evening_net:
    name: laden 's avonds van net

  car_charge_night_net:
    name: laden 's nachts van net

  car_charger_morning_net_busy:
  car_charge_day_sun_busy:
  car_charge_day_net_busy:
  car_charge_evening_net_busy:
  car_charge_night_net_busy:

###############################################################################
# sensors to calculate charging times 
###############################################################################

sensor:
  - platform: template
    sensors:
      car_range_per_10percent:
        friendly_name: 'range per 10%'
        unit_of_measurement: km
        value_template: "{{ (10 * states('sensor.car_1_range') | float(default=0) / states('sensor.car_1_soc') | float(default=0) ) | round (1) }}"

      car_range_at_target_percentage:
        friendly_name: 'rijbereik bij doelpercentage'
        unit_of_measurement: km
        value_template: "{{ ( states('input_number.car_1_optimal_target_soc') | float(default=0) * ( states('sensor.car_range_per_10percent') | float(default=0)) / 10 ) | int }}"

      car_remaining_charge_minutes:
        friendly_name: 'resterende laadminuten'
        value_template: >
          {% set targetsoc = states('input_number.car_1_optimal_target_soc') | float(default=0) %}
          {% set soc = states('sensor.car_1_soc') | float(default=0) %}
          {% set socdif = [targetsoc - soc, 0] | max %}
          {{ socdif * states('input_number.car_1_min_per_1pct') | round(2) }}

      car_remaining_charge_minutes_min_power:
        friendly_name: 'resterende laadminuten (met minimum vermogen)'
        value_template: >
          {% set targetsoc = states('input_number.car_1_optimal_target_soc') | float(default=0) %}
          {% set soc = states('sensor.car_1_soc') | float(default=0) %}
          {% set socdif = [targetsoc - soc, 0] | max %}
          {% set min_per_percent = ( 56.925 / (states('input_number.car_charge_minimum_wattage') | float ) ) | round(2) %}
          {{ (socdif * min_per_percent ) | round(2) }} 

      car_remaining_charge_minutes_fix_power:
        friendly_name: 'resterende laadminuten (met vast vermogen)'
        value_template: >
          {% set targetsoc = states('input_number.car_1_optimal_target_soc') | float(default=0) %}
          {% set soc = states('sensor.car_1_soc') | float(default=0) %}
          {% set socdif = [targetsoc - soc, 0] | max %}
          {% set min_per_percent = ( 56.925 / (states('input_number.car_charge_fixed_wattage') | float ) ) | round(2) %}
          {{ (socdif * min_per_percent ) | round(2) }}

      car_charge_stoptimer_starttime:
        friendly_name: 'startuur laden met doeluur'
        value_template: >
          {% set nog_te_laden_minuten = states('sensor.car_remaining_charge_minutes_fix_power') | round(2) %}
          {% set laaddoel = state_attr('input_datetime.car_charge_target_time', 'timestamp') %}
          {% set laadstart = (laaddoel - nog_te_laden_minuten * 60) | timestamp_custom('%Y-%m-%d %H:%M') %}
          {{ laadstart }}

      car_charge_estimate_day:
        friendly_name: "mogelijke lading overdag"
        unit_of_measurement: kWh
        value_template: >
          {% set solar = states('sensor.solar_sim_energy_today_adj') | float() %}
          {% set hours = states('sensor.daylight') | round(2) - 1 %}
          {% set result = ( solar / hours ) | round(2) %}
          {% set p = ( ([result - 0.8, 0 ] | max ) * hours ) | round(2) %}
          {{ p }}

      car_charge_estimate_evening:
        friendly_name: "mogelijke lading 's avonds na zonsondergang tot 23u"
        unit_of_measurement: kWh
        value_template: >
          {% set sunset_time = as_timestamp(states('sensor.sunset')) | timestamp_custom('%H:%M')  %}
          {% set sunset_hours = sunset_time.split(':')[0] | int %}
          {% set sunset_minutes = sunset_time.split(':')[1] | int %}
          {% set sunset_decimal_time = sunset_hours + sunset_minutes / 60 %}
          {% set hours = ( 23 - sunset_decimal_time ) | round(2) %}
          {% set wattage = states('input_number.car_charge_peak_netwattage') | float() / 1000 %}
          {% if wattage >= 3 %} {{ [(wattage - 1), 1.5] | max * hours }}
          {% else %} 0
          {% endif %}

      car_charge_estimate_night:
        friendly_name: "mogelijke lading 's nachts van 23u tot 6u30"
        unit_of_measurement: kWh
        value_template: >
          {% set hours = 7.5 %}
          {% set wattage = states('input_number.car_charge_peak_netwattage') | float() / 1000 %}          
          {{ hours * wattage }}