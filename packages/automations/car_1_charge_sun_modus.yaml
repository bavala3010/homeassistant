############################ Table of Contents ############################
# 
#   Automations
#   ðŸš— car 1 // ðŸ”‹ charge // mode sun // start - als er voldoende injectie is
#   ðŸš— car 1 // ðŸ”‹ charge // mode sun // bezig - check elke minuut tijdens zonneladen
#   ðŸš— car 1 // ðŸ”‹ charge // mode sun // stop - bij verbruik net
#   ðŸš— car 1 // ðŸ”‹ charge // mode sun // check SOC tov ideaal laaddoel

############################ Automations ################################## 
automation:

######################################
# car charge: sun mode
######################################

- alias: "ðŸš— car 1 // ðŸ”‹ charge // mode sun // start - als er voldoende injectie is"
  id: 'fff013ea-12e1-427f-8283-617a0f2e94ad'
  description: ''
  # start when the injection sensor (average last 3 minutes) is below the number defined in input_number.car_charge_sun_start_wattage
  trigger:
  - platform: time_pattern
    minutes: /1
  - platform: numeric_state
    entity_id: sensor.net_power_avg
    below: input_number.car_charge_sun_start_wattage
    for: "00:03:00"
  condition:
  - condition: numeric_state
    entity_id: sensor.net_power_avg
    below: input_number.car_charge_sun_start_wattage
  # only when SOC is below 100%
  ### removed to reduce dependancy on Audi servers ###
  # - condition: template
  #   value_template: "{{ states('sensor.car_1_soc')| int < 100  }}"
  ######################################################  
  # only if charger cable is connected to home charger (status "connected") or in status "charging"
  - condition: or
    conditions:
    - condition: state
      entity_id: sensor.charger_status
      state: 'connected'            
    - condition: state
      entity_id: sensor.charger_status
      state: 'charging'
  #####################################################  
  # only if charge mode "sun" has been chosen   
  - condition: state
    entity_id: input_boolean.car_charge_mode_sun
    state: 'on'
    # only if charge mode "sun" is not busy/ongoing at this moment  
  - condition: state
    entity_id: input_boolean.car_charge_sun_busy
    state: 'off'
  action:
  # toggle the switches to keep track of the status
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id:
        - input_boolean.car_charge_sun_busy
        - input_boolean.car_charge_busy
  # define charger Watt based on injection
  - service: input_number.set_value
    target:
      entity_id: input_number.car_charger_watt
    data:
      value: >-
        {% set charger = states('sensor.charger_real_power') | float(default=0) %}        
        {% set maxpower = states('input_number.car_charge_sun_max_netwattage') | float(default=0) %}
        {# set net = states('sensor.net_power_avg') | float(default=0) #}
        {% set net = (states('sensor.net_power_avg') | float(default=0) + states('sensor.net_power') | float(default=0) ) / 2 %}
        {{ - (net - maxpower - charger) /1000 }}
  - wait_template: ''
    timeout: '00:00:05'
  - service: script.charger_define_phase_1_or_3_based_on_watt
  - service: script.charger_define_ampere_based_on_watt     
  - service: script.charger_define_and_write_register_based_on_ampere
  - service: notify.bart_phone
    data:
      title: Auto is gestart met laden op zonne-energie
      message: >
        Zon nu {{ states('sensor.solar_power') | int }} W | Net: {{ states('sensor.net_power')}} W | Auto laadt nu aan {{states('input_number.car_charger_watt') | round(1)}} kW<br>
        Auto: {{states('sensor.car_1_soc') | round()}}%. Doel: {{ states('input_number.car_charge_target_percentage') | round(0)}}%<br>
        Vandaag al {{ states('sensor.car_charge_solar_energy_daily') | round(1) }} kWh geladen met zon en {{ states('sensor.car_charge_net_energy_daily') | round(1) }} kWh van het net.
      data:
        tag: car_charging_sun
        color: green
        notification_icon: "mdi:car-electric"
        actions:
        - action: URI
          title: meer info
          uri: /dashboard-car/car-charging
  mode: single   

- alias: "ðŸš— car 1 // ðŸ”‹ charge // mode sun // bezig - check elke minuut tijdens zonneladen"
  id: '258101bc-919c-4944-96e4-bb290cbe8922'
  trigger:
  - platform: time_pattern
    minutes: /1    
  condition:
  - condition: state
    entity_id: input_boolean.car_charge_mode_sun
    state: 'on'
  # only if charger cable is connected to home charger or already charging
  - condition: or
    conditions:    
    - condition: state
      entity_id: sensor.charger_status
      state: 'connected'            
    - condition: state
      entity_id: sensor.charger_status
      state: 'charging'
  # only if charging is busy in sun mode
  - condition: state
    entity_id: input_boolean.car_charge_sun_busy
    state: 'on'
  # only when SOC is below 100%
  ### removed to reduce dependancy on Audi servers ####
  # - condition: template
  #   value_template: "{{ states('sensor.car_1_soc')| int < 100  }}"
  ######################################################
  action:
    - if:
        - condition: template
          value_template: "{{ wattage > 1.3 }}"
      then:
        - service: input_number.set_value
          target:
            entity_id: input_number.car_charger_watt
          data:
            value: >-
              {{ wattage }}
        - wait_template: ''
          timeout: '00:00:05'
        - service: script.charger_define_phase_1_or_3_based_on_watt
        - service: script.charger_define_ampere_based_on_watt
        - service: script.charger_define_and_write_register_based_on_ampere
      else:
        - service: script.stop_charger
          data: {}
        # wait 3 minutes to avoid too frequent start/stop = result in charging faillure
        - service: notify.bart_phone
          data:
            title: Zonneladen gestopt
            message: >
              Zon: {{ states('sensor.solar_power') | int }} W | Net: {{ states('sensor.net_power')}} W | Auto: {{states('input_number.car_charger_watt') | round(1)}} kW<br>
              Auto nu: {{states('sensor.car_1_soc') | round()}}%. Doel: {{ states('input_number.car_charge_target_percentage') | round(0)}}%<br>
              Vandaag al {{ states('sensor.car_charge_solar_energy_daily') | round(1,default=0) }} kWh geladen met zon en {{ states('sensor.car_charge_net_energy_daily') | round(1) }} kWh van het net.
            data:
              tag: car_charging_sun
              color: green
              notification_icon: "mdi:car-electric"                    
        - wait_template: ''
          timeout: '00:03:00'          
  variables:
      wattage: >
        {% set charger = states('sensor.charger_real_power') | float(default=0) %}        
        {% set maxpower = states('input_number.car_charge_sun_max_netwattage') | float(default=0) %}
        {# set net = states('sensor.net_power_avg') | float(default=0) #}
        {% set net = (states('sensor.net_power_avg') | float(default=0) + states('sensor.net_power') | float(default=0) ) / 2 %}
        {{ (- (net - maxpower - charger) / 1000) | float }}       
  mode: single    


- alias: "ðŸš— car 1 // ðŸ”‹ charge // mode sun // stop - bij verbruik net"
  id: '8a35994e-0144-43b6-905d-61ba985df90f'
  trigger:
  # when net consumption is above 500 W
  - platform: numeric_state
    entity_id: sensor.net_power
    above: '500'
    for:
      hours: 0
      minutes: 2
      seconds: 0  
  condition:
  # only if charging is busy in sun mode 
  - condition: state
    entity_id: input_boolean.car_charge_sun_busy
    state: 'on'
  action:
  # stop charger
  - service: script.stop_charger
    data: {}
  # set charget Watt back to (default) 5.5 W (without starting)
  - service: input_number.set_value
    target:
      entity_id: input_number.car_charger_watt
    data:
      value: 5.5
  mode: single

- alias: "ðŸš— car 1 // ðŸ”‹ charge // mode sun // check SOC tov ideaal laaddoel"
  id: '2c93c0ae-c0b7-43bf-9014-ddf5f6a12944'
  trigger:
  - platform: state
    entity_id: sensor.car_1_soc
  condition:
    # only if charging in direct mode 
  - condition: state
    entity_id: input_boolean.car_charge_mode_sun
    state: 'on'
    # check dat huidige SOC groter is dan ideaal laaddoel
  - condition: template
    value_template: "{{ states('sensor.car_1_soc')| int(2) >= (states('input_number.car_ideal_target_soc') | int(2)) }}"
  - condition: state
    entity_id: sensor.charger_status
    state: 'charging'
  action:
  - service: notify.bart_phone
    data:
      title: Laaddoel bereikt!
      message: >
        {% set soc = states('sensor.car_1_soc') | round(default=0) %}
        {% set targetsoc = states('input_number.car_ideal_target_soc') | round(default=0) %}
        {% set range = ( soc * (states('sensor.car_range_per_10percent') | float(default=0)) / 10 ) | int(0) %}
        Laaddoel van {{ targetsoc }}% is bereikt. Huidige lading: {{ soc }}% = {{ range }} km
      data:
        tag: car_charging
        color: green
        actions:
        - action: URI
          title: meer info
          uri: /dashboard-car/car-charging      
  # stop charging
  - service: script.stop_charger
    data: {}
  mode: single