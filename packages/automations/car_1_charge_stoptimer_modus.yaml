############################ Table of Contents ############################ 
# 
#   Automations


############################ Automations ################################## 
automation:

######################################
# car charge: stoptimer charging
######################################

- alias: "ðŸš— car 1 // ðŸ”‹ charge // stoptimer modus // starten op datum en uur van timer"
  id: '7bcf7836-3149-4eb2-9d40-f0f3f309a249'
  description: ''
  trigger:
    platform: template
    value_template: "{{ states('sensor.car_charge_stoptimer_starttime') == now().strftime('%Y-%m-%d %H:%M') }}"
  # Only run routine if charge has not yet started (input_boolean.car_charge_busy = off)
  # Because the calculated start time continuously moves while charge, this routine would continously be triggered
  condition:
  # check if SOC < target SOC, otherwise routine should not run
  - condition: template
    value_template: "{{ states('sensor.car_1_soc')| int(2) < (states('input_number.car_charge_target_percentage') | int(2)) }}"
  # only when 'charge mode net' is ON
  - condition: state
    entity_id: input_boolean.car_charge_mode_stoptimer
    state: 'on'
  # only when 'charge busy' is OFF  
  - condition: state
    entity_id: input_boolean.car_charge_busy
    state: 'off'
  action:
  - service: input_boolean.turn_on
    data: {}
    target:
      entity_id:
      - input_boolean.car_charge_busy
      - input_boolean.car_charge_net_busy
  - service: input_number.set_value
    target:
      entity_id: input_number.car_charger_watt
    data:
      value: >-
        {{ states('input_number.car_charge_fixed_wattage') | float(default=0) }}      
  - service: script.charger_define_phase_1_or_3_based_on_watt
  - service: script.charger_define_ampere_based_on_watt
  - service: script.charger_define_and_write_register_based_on_ampere
  - service: notify.bart_phone
    data:
      title: laden gestart met netstroom
      message: >
        {% set soc = states('sensor.car_1_soc') | round(default=0) %}
        {% set targetsoc = states('input_number.car_charge_target_percentage') | round(default=0) %}
        {% set targetrange = states('input_number.car_charge_target_range') | round(default=0) %}
        Doeluur: {{as_timestamp(states('input_datetime.car_charge_target_time')) | timestamp_custom('%a %-d/%-m %-Hu%M') }}<br>
        Er wordt geladen van {{ soc }}% naar {{ targetsoc }}% = {{ targetrange }} km.
      data:
        tag: car_charging
        color: green
        actions:
        - action: URI
          title: meer info
          uri: /dashboard-car/car-charging
  mode: single

- alias: "ðŸš— car 1 // ðŸ”‹ charge // stoptimer modus // laaddoel bereikt (enkel directe mode en timer mode) = laden stoppen + melding sturen (enkel thuis)"
  id: 'b7a22897-2c7b-4e07-bf71-380271658908'
  description: ''
  trigger:
  - platform: state
    entity_id: sensor.car_1_soc
  condition:
  # check dat huidige SOC groter is dan gevraagd laaddoel
  - condition: template
    value_template: "{{ states('sensor.car_1_soc')| int(2) >= (states('input_number.car_charge_target_percentage') | int(2)) }}"
  # enkel als de lader bezig is    
  - condition: state
    entity_id: sensor.charger_status
    state: 'charging'
  # enkel als er niet met (enkel) zon wordt geladen    
  - condition: state
    entity_id: input_boolean.car_charge_sun_busy
    state: 'off'    
  action:
  - service: notify.bart_phone
    data:
      title: Laaddoel bereikt!
      message: >
        {% set soc = states('sensor.car_1_soc') | round(default=0) %}
        {% set targetsoc = states('input_number.car_charge_target_percentage') | round(default=0) %}
        {% set range = ( soc * (states('sensor.car_range_per_10percent') | float(default=0)) / 10 ) | int(0) %}
        Laaddoel van {{ targetsoc }}% is bereikt. Huidige lading: {{ soc }}% = {{ range }} km
      data:
        tag: car_charging
        color: green
        actions:
        - action: URI
          title: meer info
          uri: /dashboard-car/car-charging      
  # stop charging
  - service: script.stop_charger
    data: {}
    
  mode: single

- alias: "ðŸš— car 1 // ðŸ”‹ charge // stoptimer modus // laaddoeluur bereikt = laden stoppen + verzetten naar 's anderendaags"
  id: '94c89ef0-a331-4a74-a2bc-d03289b73354'
  description: ''
  trigger:
  - platform: template
    value_template: "{{ as_timestamp(now()) | timestamp_custom('%Y-%m-%d %H:%M:%S') == states('input_datetime.car_charge_target_time') }}"
  condition: []
  action:
  - service: script.stop_charger
    data: {}
  - service: input_datetime.set_datetime
    data:
      entity_id: input_datetime.car_charge_target_time
      datetime: "{{ (as_timestamp(states('input_datetime.car_charge_target_time')) + (24 * 60 * 60)) | timestamp_custom('%Y-%m-%d %H:%M:%S', true) }}"
  mode: single


