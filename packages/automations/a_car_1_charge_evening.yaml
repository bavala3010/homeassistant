automation:

- alias: "ðŸš— car 1 // ðŸ”‹ charge evening // start-bezig-stop"
  id: '8e58166c-641b-4184-935b-15dc8b379f22'
  trigger:
  - platform: time_pattern
    minutes: /1
  condition:
  - condition: template
    value_template: "{{ as_timestamp(states('sensor.sunset')) < as_timestamp(now()) < as_timestamp(now().replace(hour=23, minute=0, second=0)) }}"
    # only if charger cable is connected to home charger or already charging  
  - condition: template
    value_template: "{{ states('sensor.charger_status') in ['charging', 'connected'] }}"
  variables:
      wattage: >
        {% set net = states('sensor.net_power_excl_charger_avg2min') | float %}
        {% set charger = states('sensor.charger_current_power') | float(default=0) %}        
        {% set maxpower = states('input_number.car_charge_peak_netwattage') | float(default=0) %}
        {{ (( maxpower - net ) / 1000) | float }}
  action:
    - if:
        - condition: state
          entity_id: input_boolean.car_charge_evening_net
          state: 'on'      
        - condition: template
          value_template: "{{ wattage > 1.3 }}"
        # - condition: or
        #   conditions:
        #     - condition: and
        #       conditions:
        #         - condition: state
        #           entity_id: input_select.car_1_charge_limit
        #           state: 'minimaal doel'
        #         - condition: template
        #           value_template: "{{ states('sensor.car_1_soc') < states('input_number.car_1_min_target_soc') }}"
        #     - condition: and
        #       conditions:
        #         - condition: state
        #           entity_id: input_select.car_1_charge_limit
        #           state: 'optimaal doel'
        #         - condition: template
        #           value_template: "{{ states('sensor.car_1_soc') < states('input_number.car_1_optimal_target_soc') }}"          
      then:
        - service: input_number.set_value
          target:
            entity_id: input_number.car_charger_watt
          data:
            value: "{{ wattage }}"
        - wait_template: ''
          timeout: '00:00:05'
        - service: script.start_charger
      else:
        if:
          - condition: template
            value_template: "{{ states('sensor.charger_current_power') | float() > 0 }}"
        then:      
          - service: script.stop_charger
            data: {}
          - service: notify.bart_phone
            data:
              title: Auto is gestopt met laden. Nu 3 minuten wachten.
              message: >
                Gestopt
          - wait_template: ''
            timeout: '00:03:00'
  mode: single

