########################################################################### 
#   Directe modus
#   - neemt automatisch een deel van de zon (als die opbrengt)
#   - netverbruik wordt beperkt tot een maximum (input_number.car_charge_minimum_wattage) 


############################ Table of Contents ############################ 
#   Automations
#
#

############################ Automations ################################## 
automation:

- alias: "ğŸš— car 1 // ğŸ”‹ charge // direct modus // start en bezig: pas elke minuut het vermogen van de lader aan"
  id: '362cc8ae-99e6-4ddc-95d1-feb6a0daeb1e'
  trigger:
  - platform: time_pattern
    minutes: /1
  condition:
    # only if charging in direct mode 
  - condition: state
    entity_id: input_boolean.car_charge_mode_now
    state: 'on'
    # only if charger cable is connected to home charger or already charging
  - condition: or
    conditions:    
    - condition: state
      entity_id: sensor.charger_status
      state: 'connected'            
    - condition: state
      entity_id: sensor.charger_status
      state: 'charging'
  action:
    - service: input_number.set_value
      target:
        entity_id: input_number.car_charger_watt
      data:
        value: >-
          {% set charger = states('sensor.charger_real_power') | float(default=0) / 1000 %}        
          {% set maxpower = states('input_number.car_charge_minimum_wattage') | float(default=0) %}
          {% set net = states('sensor.net_power') | float(default=0) %}
          {% set adjustment = [-net, maxpower] | max %}
          {% if net + charger < maxpower %}
          {{ [(-net + charger) / 1000, maxpower] | max }}
          {% elif net + charger > maxpower %}
          {{ maxpower }}
          {% endif %}
    - wait_template: ''
      timeout: '00:00:05'
    - service: script.charger_define_phase_1_or_3_based_on_watt
    - service: script.charger_define_ampere_based_on_watt      
    - service: script.charger_define_and_write_register_based_on_ampere
  mode: single

- alias: "ğŸš— car 1 // ğŸ”‹ charge // direct modus // stop bij bereiken laaddoel"
  id: 'b008edb7-44dc-49dc-bf27-6987bfaf4790'
  trigger:
  - platform: state
    entity_id: sensor.car_1_soc
  condition:
    # only if charging in direct mode 
  - condition: state
    entity_id: input_boolean.car_charge_mode_now
    state: 'on'
    # check dat huidige SOC groter is dan laaddoel
  - condition: template
    value_template: "{{ states('sensor.car_1_soc')| int(2) >= (states('input_number.car_charge_target_percentage') | int(2)) }}"
  - condition: template
    value_template: "{{ states('sensor.charger_status') == 'charging' or states('sensor.charger_status') == 'error'}}"
  action:
  - service: notify.bart_phone
    data:
      title: Laaddoel bereikt!
      message: >
        {% set soc = states('sensor.car_1_soc') | round(default=0) %}
        {% set targetsoc = states('input_number.car_charge_target_percentage') | round(default=0) %}
        {% set range = ( soc * (states('sensor.car_range_per_10percent') | float(default=0)) / 10 ) | int(0) %}
        Laaddoel {{ targetsoc }}% is bereikt. Huidige lading: {{ soc }}% = {{ range }} km
      data:
        tag: car_charging
        color: green
        actions:
        - action: URI
          title: meer info
          uri: /dashboard-car/car-charging      
  # stop charging
  - service: script.stop_charger
    data: {}
  mode: single

- alias: "ğŸš— car 1 // ğŸ”‹ charge // direct modus // minimum wattage is veranderd in dropdownlijst"
  id: '6a180451-efc5-4e27-9e7e-f2e152d3ec31'
  trigger:
  - platform: state
    entity_id: input_select.car_charge_minimum_wattage
  action:
    - service: input_number.set_value
      target:
        entity_id: input_number.car_charge_minimum_wattage
      data:
        value: "{{ states('input_select.car_charge_minimum_wattage') [0:3] }}"


# gebruikt vroeger:
# input_select.car_charge_minimum_wattage
# input_number.car_charge_minimum_wattage

# vervangen door:
# input_select.car_charge_minimum_wattage
# input_number.car_charge_minimum_wattage
