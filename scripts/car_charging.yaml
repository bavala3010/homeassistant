###########################################
#  The following functions are not allowed by Audi Etron:
#    start_window_heating
#    start_preheater
#    start_charger


charge_button_stop:
  alias: charge button stop geklikt
  sequence:
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id:
        - input_boolean.car_charge_mode_now
        - input_boolean.car_charge_busy
  # set Ampere of charger to 5 to DISABLE the charging (charger requires at least 6 A)
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: [0x40a0, 0x0000]


###########################
# auto laden
###########################

auto_start_laden_nu:
  alias: auto start laden nu
  sequence:
  - service: audiconnect.execute_vehicle_action
    data:
      vin: !secret vin
      action: start_charger

auto_start_laden_timer:
  alias: auto start laden timer
  sequence:
  - service: audiconnect.execute_vehicle_action
    data:
      vin: !secret vin
      action: start_timed_charger

auto_stop_laden:
  # the stop_charge does not function on Audi Etron
  alias: auto stop laden
  sequence:
  - service: audiconnect.execute_vehicle_action
    data:
      vin: !secret vin
      action: stop_charge


#####################################
# Set car charger Ampere and phases
#####################################

stop_charger:
  alias: "laadpaal - stop laden door op 5 A te zetten"
  sequence:
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: [0x40a0, 0x0000]
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: 
      - input_boolean.car_charge_busy
      - input_boolean.car_charge_sun_busy
      - input_boolean.car_charge_net_busy
      - input_boolean.car_charge_mode_now

start_charger:
  alias: "laadpaal - aansturing"
  sequence:
    - service: script.charger_define_phase_1_or_3_based_on_watt
    - service: script.charger_define_ampere_based_on_watt
    - service: script.charger_define_and_write_register_based_on_ampere


charger_define_phase_1_or_3_based_on_watt:
  alias: "laadpaal - bepaal 1 of 3 fases"
  sequence:
  - service: >-
      {% if states('input_number.car_charger_watt') | float < 4 %}
      script.set_charger_to_1_phase
      {% elif states('input_number.car_charger_watt') | float >= 4 %}
      script.set_charger_to_3_phases
      {% endif %}

set_charger_to_1_phase:
  alias: "laadpaal - zet op 1 fase"
  sequence:
  - service: modbus.write_register
    data:
      address: 1215
      unit: 1
      hub: car_charger
      value: 1

set_charger_to_3_phases:
  alias: "laadpaal - zet op 3 fases"
  sequence:
  - service: modbus.write_register
    data:
      address: 1215
      unit: 1
      hub: car_charger
      value: 3

charger_define_ampere_based_on_watt:
  alias: "laadpaal: bepaal ampère"
  sequence:
  - service: input_number.set_value
    target:
      entity_id: input_number.car_charger_ampere
    data:
      value: >-        
          {% set W = states('input_number.car_charger_watt') | float %}
          {% if 1.3 <= W < 1.5 %} 6
          {% elif 1.5 <= W < 1.8 %} 7
          {% elif 1.8 <= W < 2.0 %} 8
          {% elif 2.0 <= W < 2.2 %} 9
          {% elif 2.2 <= W < 2.4 %} 10
          {% elif 2.4 <= W < 2.5 %} 11
          {% elif 2.6 <= W < 2.8 %} 12
          {% elif 2.8 <= W < 3.1 %} 13
          {% elif 3.1 <= W < 4   %} 14
          {% elif 4   <= W < 4.6 %} 6
          {% elif 4.6 <= W < 5.3 %} 7
          {% elif 5.3 <= W < 6.0 %} 8
          {% elif 6.0 <= W < 6.6 %} 9
          {% elif 6.6 <= W < 7.2 %} 10
          {% elif 7.2 <= W < 8.0 %} 11
          {% elif 8.0 <= W < 8.7 %} 12
          {% elif 8.7 <= W < 9.4 %} 13
          {% elif 9.4 <= W %} 14
          {% endif %}

charger_define_and_write_register_based_on_ampere:
  alias: "laadpaal: bepaal registerwaarde voor ampère en stuur naar laadpaal"
  sequence:
  - service: script.send_ampere_to_charger
    data:
      registervalue: '{{registervalue}}'
  variables:
    registervalue: >-        
      {% set A = states('input_number.car_charger_ampere') | float %}
      {% if A == 6 %}[0x40c0, 0x0000]
      {% elif A == 7 %}[0x40e0, 0x0000]
      {% elif A == 8 %}[0x4100, 0x0000]
      {% elif A == 9 %}[0x4110, 0x0000]
      {% elif A == 10 %}[0x4120, 0x0000]
      {% elif A == 11 %}[0x4130, 0x0000]
      {% elif A == 12 %}[0x4140, 0x0000]
      {% elif A == 13 %}[0x4150, 0x0000]
      {% elif A == 14 %}[0x4160, 0x0000]
      {% endif %}

send_ampere_to_charger:
  alias: "laadpaal - schrijf Ampère naar register van laadpaal"
  sequence:
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: "{{ registervalue }}"

########################

set_charger_to_6_a:
  alias: "laadpaal - zet max. op 6 A"
  sequence:
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: [0x40c0, 0x0000]

set_charger_to_7_a:
  alias: "laadpaal - zet max. op 7 A"
  sequence:
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: [0x40e0, 0x0000]

set_charger_to_8_a:
  alias: "laadpaal - zet max. op 8 A"
  sequence:
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: [0x4100, 0x0000]

set_charger_to_9_a:
  alias: "laadpaal - zet max. op 9 A"
  sequence:
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: [0x4110, 0x0000]

set_charger_to_10_a:
  alias: "laadpaal - zet max. op 10 A"
  sequence:
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: [0x4120, 0x0000]

set_charger_to_11_a:
  alias: "laadpaal - zet max. op 11 A"
  sequence:
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: [0x4130, 0x0000]

set_charger_to_12_a:
  alias: "laadpaal - zet max. op 12 A"
  sequence:
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: [0x4140, 0x0000]

set_charger_to_13_a:
  alias: "laadpaal - zet max. op 13 A"
  sequence:
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: [0x4150, 0x0000]

set_charger_to_14_a:
  alias: "laadpaal - zet max. op 14 A"
  sequence:
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: [0x4160, 0x0000]



###################
# manual charging
###################

manual_charge_during_x_min:
  alias: laad gedurende x minuten
  mode: restart
  sequence:
  - service: timer.start
    data:
      duration: "{{ (states('input_number.manual_charging_time') | float * 3600) | int }}"
    target:
      entity_id: timer.manual_charging_timer
  # laden starten
  - service: script.charger_define_phase_1_or_3_based_on_watt
  - service: script.charger_define_ampere_based_on_watt
  - service: script.charger_define_and_write_register_based_on_ampere
  - delay:
      minutes: "{{ ( states('input_number.manual_charging_time') | float * 60 ) | int }}"
  # stoppen
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.car_charge_mode_now
  - service: input_boolean.turn_off
    data: {}
    target:
      entity_id: input_boolean.car_charge_busy
  # set Ampere of charger to 5 to DISABLE the charging (charger requires at least 6 A)
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: [0x40a0, 0x0000]

manual_charge_stop:
  alias: stop handmatig laden
  sequence:
  # set Ampere of charger to 5 to DISABLE the charging (charger requires at least 6 A)
  - service: modbus.write_register
    data:
      address: 1210
      unit: 1
      hub: car_charger
      value: [0x40a0, 0x0000]
  - service: timer.cancel
    target:
      entity_id: timer.manual_charging_timer      

