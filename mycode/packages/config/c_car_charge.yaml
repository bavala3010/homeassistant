input_text:
  car_charge_info:
    name: laadinfo

input_select:
  car_charge_minimum_wattage:
    name: autolader minimum wattage
    options:
      - "1.3 kW (1 fase 6 ampère)"
      - "1.5 kW (1 fase 7 ampère)"
      - "1.8 kW (1 fase 8 ampère)"
      - "2.0 kW (1 fase 9 ampère)"
      - "2.2 kW (1 fase 10 ampère)"
      - "2.4 kW (1 fase 11 ampère)"
      - "2.6 kW (1 fase 12 ampère)"
      - "2.8 kW (1 fase 13 ampère)"
      - "3.1 kW (1 fase 14 ampère)"
      - "4.0 kW (3 fasen 6 ampère)"
      - "4.6 kW (3 fasen 7 ampère)"
      - "5.3 kW (3 fasen 8 ampère)"
    icon: mdi:power

  car_charge_fixed_wattage:
    name: autolader vast wattage
    options:
      - "1.3 kW (1 fase 6 ampère)"
      - "1.5 kW (1 fase 7 ampère)"
      - "1.8 kW (1 fase 8 ampère)"
      - "2.0 kW (1 fase 9 ampère)"
      - "2.2 kW (1 fase 10 ampère)"
      - "2.4 kW (1 fase 11 ampère)"
      - "2.6 kW (1 fase 12 ampère)"
      - "2.8 kW (1 fase 13 ampère)"
      - "3.1 kW (1 fase 14 ampère)"
      - "4.0 kW (3 fasen 6 ampère)"
      - "4.6 kW (3 fasen 7 ampère)"
      - "5.3 kW (3 fasen 8 ampère)"
    icon: mdi:power


input_number:
  car_charge_minimum_wattage:
    name: autolader minimum wattage
    min: 1.3
    max: 8
    step: 0.1
    unit_of_measurement: kW
    mode: box

  car_charge_fixed_wattage:
    name: autolader vast wattage
    min: 1.3
    max: 8
    step: 0.1
    unit_of_measurement: kW
    mode: box

  car_charge_net_max_netwattage:
    name: 'max. netverbruik bij laden van net'
    min: 0
    max: 5500
    step: 100
    unit_of_measurement: W
    mode: box
    icon: "mdi:transmission-tower"

input_boolean:
  car_charge_mode_peak:

  car_charge_limit_netcapacity:
    name: beperk tot netcapaciteit
  
  car_charge_morning_net:
    name: laden 's morgens van net

  car_charge_day_sun:
    name: laden overdag met zon

  car_charge_day_net:
    name: laden overdag van net

  car_charge_evening_net:
    name: laden 's avonds van net

  car_charge_night_net:
    name: laden 's nachts van net

  car_charge_morning_net_busy:
  car_charge_day_sun_busy:
  car_charge_day_net_busy:
  car_charge_evening_net_busy:
  car_charge_night_net_busy:

###############################################################################
# sensors to calculate charging times 
###############################################################################

template:  
  - sensor:
      - name: car_range_per_10percent
        attributes:      
          friendly_name: 'range per 10%'
        unit_of_measurement: km
        state: "{{ (10 * states('sensor.car_1_range') | float(default=0) / states('sensor.car_1_soc') | float(default=0) ) | round (1) }}"

      - name: car_range_at_target_percentage
        attributes:      
          friendly_name: 'rijbereik bij doelpercentage'
        unit_of_measurement: km
        state: "{{ ( states('input_number.car_1_optimal_target_soc') | float(default=0) * ( states('sensor.car_range_per_10percent') | float(default=0)) / 10 ) | int }}"

      - name: car_remaining_charge_minutes
        attributes:      
          friendly_name: 'resterende laadminuten'
        state: >
          {% set targetsoc = states('input_number.car_1_optimal_target_soc') | float(default=0) %}
          {% set soc = states('sensor.car_1_soc') | float(default=0) %}
          {% set socdif = [targetsoc - soc, 0] | max %}
          {{ socdif * states('input_number.car_1_min_per_1pct') | round(2) }}

      - name: car_remaining_charge_minutes_min_power
        attributes:      
          friendly_name: 'resterende laadminuten (met minimum vermogen)'
        state: >
          {% set targetsoc = states('input_number.car_1_optimal_target_soc') | float(default=0) %}
          {% set soc = states('sensor.car_1_soc') | float(default=0) %}
          {% set socdif = [targetsoc - soc, 0] | max %}
          {% set min_per_percent = ( 56.925 / (states('input_number.car_charge_minimum_wattage') | float ) ) | round(2) %}
          {{ (socdif * min_per_percent ) | round(2) }} 

      - name: car_remaining_charge_minutes_fix_power
        attributes:      
          friendly_name: 'resterende laadminuten (met vast vermogen)'
        state: >
          {% set targetsoc = states('input_number.car_1_optimal_target_soc') | float(default=0) %}
          {% set soc = states('sensor.car_1_soc') | float(default=0) %}
          {% set socdif = [targetsoc - soc, 0] | max %}
          {% set min_per_percent = ( 56.925 / (states('input_number.car_charge_fixed_wattage') | float ) ) | round(2) %}
          {{ (socdif * min_per_percent ) | round(2) }}

      - name: car_charge_stoptimer_starttime
        attributes:      
          friendly_name: 'startuur laden met doeluur'
        state: >
          {% set nog_te_laden_minuten = states('sensor.car_remaining_charge_minutes_fix_power') | round(2) %}
          {% set laaddoel = state_attr('input_datetime.car_charge_target_time', 'timestamp') %}
          {% set laadstart = (laaddoel - nog_te_laden_minuten * 60) | timestamp_custom('%Y-%m-%d %H:%M') %}
          {{ laadstart }}

      - name: car_charge_estimate_day
        attributes:      
          friendly_name: "mogelijke lading overdag"
        unit_of_measurement: kWh
        state: >
          {% set solar = states('sensor.solar_sim_energy_today_adj') | float() %}
          {% set hours = states('sensor.zon_van_eikenbos_daglicht') | round(2) - 1 %}
          {% set result = ( solar / hours ) | round(2) %}
          {% set p = ( ([result - 0.8, 0 ] | max ) * hours ) | round(2) %}
          {{ p }}

      - name: car_charge_estimate_evening
        attributes:      
          friendly_name: "mogelijke lading 's avonds na zonsondergang tot 23u"
        unit_of_measurement: kWh
        state: >
          {% set sunset_time = as_timestamp(states('sensor.zon_van_eikenbos_ondergang')) | timestamp_custom('%H:%M')  %}
          {% set sunset_hours = sunset_time.split(':')[0] | int %}
          {% set sunset_minutes = sunset_time.split(':')[1] | int %}
          {% set sunset_decimal_time = sunset_hours + sunset_minutes / 60 %}
          {% set hours = ( 23 - sunset_decimal_time ) | round(2) %}
          {% set wattage = states('input_number.car_charge_net_max_netwattage') | float() / 1000 %}
          {% if wattage >= 3 %} {{ [(wattage - 1), 1.5] | max * hours }}
          {% else %} 0
          {% endif %}

      - name: car_charge_estimate_night
        attributes:      
          friendly_name: "mogelijke lading 's nachts van 23u tot 6u30"
        unit_of_measurement: kWh
        state: >
          {% set hours = 7.5 %}
          {% set wattage = (states('input_number.car_charge_net_max_netwattage') | float() / 1000) - 0.4 %}
          {{ hours * wattage }}

      - name: net_power_excl_charger
        attributes:
          friendly_name: "net power zonder autolader"
        unique_id: 'ddc1bd97-90df-483c-8659-48ed4c2790bd'
        unit_of_measurement: W
        device_class: power
        state: >
          {% set net = states('sensor.net_power') | float(default=0) %}
          {% set charger = states('sensor.charger_current_power') | float(default=0) %}
          {{ ( net - charger ) | round(default=0) }}

      - name: car_1_charge_limit
        attributes:
          friendly_name: 'laden stoppen bij'
        unit_of_measurement: '%'
        state: >
          {% if states('input_select.car_1_charge_limit') == 'minimumdoel'%}{{ states('input_number.car_1_min_target_soc')}}
          {% elif states('input_select.car_1_charge_limit') == 'optimaal doel'%}{{ states('input_number.car_1_optimal_target_soc')}}
          {% elif states('input_select.car_1_charge_limit') == '100%'%}100
          {% endif %}

      - name: car_1_remaining_charge_time_next_24h
        state: >
          {% set remaining_time = states('sensor.audi_e_tron_sportback_remaining_charge_time') | int %}
          {% if remaining_time is not none %}
            {{ remaining_time }}
          {% else %}
            unknown
          {% endif %}
        attributes:
          friendly_name: "Car 1 Remaining Charge Time Next 24h"
          data_points: >-
            {% set remaining_time = states('sensor.audi_e_tron_sportback_remaining_charge_time') | int %}
            {% set current_time = now().strftime('%Y-%m-%d %H:%M') %}
            {% set data_points = [] %}
            {% if remaining_time is not none %}
              {% for minute in range(0, 1440) %}
                {% set time_diff = minute | int / 60 %}
                {% set new_time = (as_timestamp(current_time) + time_diff * 60) | timestamp_custom('%Y-%m-%d %H:%M', false) %}
                {% if minute < remaining_time %}
                  {% set data_point = {'x': new_time, 'y': remaining_time - minute} %}
                {% else %}
                  {% set data_point = {'x': new_time, 'y': 0} %}
                {% endif %}
                {% set _ = data_points.append(data_point) %}
              {% endfor %}
              [{{ data_points | join(', ') }}]
            {% else %}
              unknown
            {% endif %}



    binary_sensor:
      - name: "sunrise before 6:30"
        attributes:
          friendly_name: "opkomst zon voor 6:30"
        state: >
          {% set sunrise_time = as_timestamp(states('sensor.zon_van_eikenbos_opkomst')) | timestamp_custom('%H:%M') %}
          {% if sunrise_time < "06:30" %}
            on
          {% else %}
            off
          {% endif %}

sensor:
  # - platform: statistics
  #   name: "charger current power avg2min"
  #   entity_id: sensor.charger_current_power
  #   unique_id: '07a2fb39-1bb8-4e1f-a0ff-28127276bbc9'
  #   state_characteristic: average_linear
  #   max_age:
  #     minutes: 2

  # - platform: filter
  #   name: "charger current power avg 2min"
  #   entity_id: sensor.charger_current_power
  #   filters:
  #     - filter: outlier
  #       window_size: 6   # number of samples taken (was vroeger 6, nu aangepast naar 20 als test)
  #       radius: 10000  # ignore readings if difference is bigger than 10000
  #     - filter: time_simple_moving_average
  #       window_size: "00:02"  

  - platform: average
    name: "net power excl charger avg 2min"
    duration: 00:02:00
    entities:
      - sensor.net_power_excl_charger

  - platform: average
    name: "charger current power avg"
    duration: 00:02:00
    entities:
      - sensor.charger_current_power

  - platform: average
    name: "charger current power avg 15min"
    duration: 00:15:00
    entities:
      - sensor.charger_current_power
  
  - platform: average
    name: "charger current power avg 5min"
    duration: 00:05:00
    entities:
      - sensor.charger_current_power  