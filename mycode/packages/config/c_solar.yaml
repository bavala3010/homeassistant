
template:
    # converts the sma_power_ac sensor to sensor.solar_power
    # but cutting off incorrect (too high) values to 10000
  - trigger:
      - platform: time_pattern
        seconds: '/10'
    sensor:
      name: solar_power
      unique_id: '136e925b-8fa2-446f-b0b5-222cfd4742f1'
      unit_of_measurement: "W"
      state_class: measurement
      device_class: power
      icon: "mdi:solar-power"
      state: >
        {% if states('sensor.sma_power_ac') | float(default=0) >=10000 %}
        0
        {% elif states('sensor.sma_power_ac') | float(default=0) <= 10000 %}
        {{ states('sensor.sma_power_ac') | float(default=0) }}
        {% endif %}

  - sensor:
      - name: "solar forecast Watt"
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        unique_id: solar_forecast_watt
        availability: "{{state_attr('sensor.solar_forecast_watt_raw', 'watts')[state_attr('sensor.solar_forecast_watt_raw', 'watts')|sort|select('le', now().strftime('%Y-%m-%d %H:%M:%S'))|list|last] |float |is_number }}"  
        state: >
            {% set time_now = now().strftime('%Y-%m-%d %H:%M:%S') %}
            {% set tkey = state_attr('sensor.solar_forecast_watt_raw', 'watts')
                          |sort|select('le', time_now)|list|last %}
            {{ state_attr('sensor.solar_forecast_watt_raw', 'watts')[tkey] | float }}

      - name: net_neutrality
        unit_of_measurement: "%"
        attributes:
          friendly_name: "netonafhankelijkheid totaal"
        state_class: measurement
        icon: "mdi:solar-power"
        state: >-
          {% set sp = states('sensor.sma_energy_total') | float %}
          {% set nc = states('sensor.net_consumption_energy_total') | float %}
          {% set ni = states('sensor.net_injection_energy_total') | float %}
          {{ ((sp - ni ) / ( sp - ni + nc) * 100 ) | round(1) }}

      - name: net_neutrality_now
        unique_id: 'c736e6c8-867f-4e41-92d6-9423a8e23b9a'
        unit_of_measurement: "%"
        attributes: 
          friendly_name: "netonafhankelijkheid nu"
        icon: "mdi:solar-power"
        state: >-
          {% set sp = states('sensor.solar_power') | float %}
          {% set hc = states('sensor.huisverbruik') | float %}
          {% set result = [((sp  / hc ) * 100 ) | round(), 100] | min %}
          {{ result }}
        availability: >
          {% if result < 0 %}
            false
          {% endif %}

      - name: net_neutrality_today
        unique_id: '23f3acda-b47b-41d7-a236-986bbab40f46'
        unit_of_measurement: "%"
        attributes:
          friendly_name: "netonafhankelijkheid vandaag"
        state_class: measurement
        icon: "mdi:solar-power"
        state: >-
          {% set sp = states('sensor.sma_today') | float %}
          {% set nc = states('sensor.net_consumption_daily') | float %}
          {% set ni = states('sensor.net_injection_daily') | float %}
          {{ ((sp - ni ) / ( sp - ni + nc) * 100 ) | round() }}

      - name: net_neutrality_home
        unique_id: '56e6377b-0276-49ab-bb4d-87ed86eb3c54'
        unit_of_measurement: "%"
        attributes:
          friendly_name: "netonafhankelijkheid huis"
        state_class: measurement
        icon: "mdi:solar-power"
        state: >-
          {% set sp = states('sensor.sma_energy_total') | float %}
          {% set nc = states('sensor.net_consumption_energy_total') | float %}
          {% set ni = states('sensor.net_injection_energy_total') | float %}
          {% set car_net = states('sensor.car_charge_net_energy') | round() %}
          {% set car_sun = states('sensor.car_charge_solar_energy') | round() %}
          {{ (((sp - ni - car_sun) / (sp - ni + nc - car_net - car_sun) ) * 100 ) | round(1) }}

      - name: net_neutrality_car
        unit_of_measurement: "%"
        attributes:
          friendly_name: "netonafhankelijkheid auto"
        state_class: measurement
        icon: "mdi:solar-power"
        state: >-
          {% set car_net = states('sensor.car_charge_net_energy') | round() %}
          {% set car_sun = states('sensor.car_charge_solar_energy') | round() %}
          {{ (car_sun / (car_net + car_sun) * 100 ) | round(1)}}

      - name: solar_self_consumption
        unit_of_measurement: "kWh"
        attributes:        
          friendly_name: "zelfverbruik zonne-energie"
        icon: "mdi:solar-power"
        state: >-
          {% set sp = states('sensor.sma_energy_total') | float %}
          {% set ni = states('sensor.net_injection_energy_total') | float %}
          {{ sp - ni }}

      - name: solar_selfconsumption_today
        unique_id: '666632a2-307f-4e86-886d-1a62744f7de0'
        unit_of_measurement: "%"
        attributes:        
          friendly_name: "zelfverbruik vandaag"
        state: >-
          {% set sp = states('sensor.sma_today') | float(default=0) %}
          {% set ni = states('sensor.net_injection_daily') | float %}
          {{ (((sp - ni ) / sp) * 100 ) | round() }}

      - name: solar_terraszijde_efficiency
        unique_id: e66135d3-6d2c-48f4-b803-8b6162127a74
        unit_of_measurement: "%"
        attributes:        
          friendly_name: zonnepanelen terraszijde efficiëntie
        state: >-
          {{ (states('sensor.solar_terraszijde_energie_daily') | float / 6150 * 1000 * 100) | round(1) }}

      - name: solar_voorzijde_efficiency
        unique_id: 6f31cf37-4175-44ea-9dd8-3179f7b18d80     
        unit_of_measurement: "%"
        attributes:        
          friendly_name: zonnepanelen voorzijde efficiëntie
        state: >-
          {{ (states('sensor.solar_voorzijde_energie_daily') | float / 8610 * 1000 * 100) | round(1) }}

      - name: net_injection_savings 
        unit_of_measurement: "EUR"
        attributes:        
          friendly_name: "winst teruggave"
        state: >-
          {% set np = states('sensor.net_injection_daily') | float(default=0) %}
          {% set i = states('input_number.elektriciteitsprijs_injectie') | float() %}
          {{ (np * i) | round(1) }}

      - name: solar_selfconsumption_savings
        unit_of_measurement: "EUR"
        attributes:        
          friendly_name: "winst zelfverbruik"
        state: >-
          {% set sp = states('sensor.zonne_energie_totaal') | float(default=0) %}
          {% set i = states('sensor.net_injection_daily') | float(default=0) %}
          {% set c = states('input_number.elektriciteitsprijs_afname') | float() %}
          {{ ((sp - i ) * c ) | round(1) }}

      - name: solar_sim_energy_current_hour
        # totaal van de gesimuleerde productie  (= solar integratie)
        unique_id: 'd68dd862-330b-4165-9273-2d12a268d29f'
        unit_of_measurement: "kWh"
        attributes:        
          friendly_name: "zonne-energie productie simulatie dit uur"
        icon: "mdi:solar-power"
        state: >-
          {% set s1 = states('sensor.energy_current_hour')  | float(default=0) %}
          {% set s2 = states('sensor.energy_current_hour_2')| float(default=0) %}
          {{ s1 + s2 }}

      - name: solar_sim_energy_next_hour
        # totaal van de gesimuleerde productie  (= solar integratie)
        unique_id: 'f38a8749-3262-4933-a32e-5b2dbc68135e'
        unit_of_measurement: "kWh"
        attributes:        
          friendly_name: "zonne-energie productie simulatie volgend uur"
        icon: "mdi:solar-power"
        state: >-
          {% set s1 = states('sensor.energy_next_hour')  | float(default=0) %}
          {% set s2 = states('sensor.energy_next_hour_2')| float(default=0) %}
          {{ s1 + s2 }}

      - name: solar_sim_energy_today
        # totaal van de gesimuleerde productie  (= solar integratie)
        unique_id: 'd7878be1-3fb7-4f10-a090-92bf0640868c'
        unit_of_measurement: "kWh"
        attributes:   
          friendly_name: "zonne-energie productie simulatie vandaag"
        icon: "mdi:solar-power"
        state: >-
          {% set s1 = states('sensor.energy_production_today')  | float(default=0) %}
          {% set s2 = states('sensor.energy_production_today_2')| float(default=0) %}
          {{ s1 + s2 }}

      - name: solar_sim_energy_tomorrow
        # totaal van de gesimuleerde energie (= solar integratie)
        unit_of_measurement: "kWh"
        attributes:          
          friendly_name: "zonne-energie productie simulatie morgen"
        icon: "mdi:solar-power"
        state: >-
          {% set s1 = states('sensor.energy_production_tomorrow')  | float(default=0) %}
          {% set s2 = states('sensor.energy_production_tomorrow_2')| float(default=0) %}
          {{ s1 + s2 }}

      - name: solar_sim_energy_today_adj
        # zonneproductie vandaag met aangepaste waarden
        unit_of_measurement: "kWh"
        attributes:         
          friendly_name: "zonne-energie productie simulatie vandaag (gecorrigeerd)"
        icon: "mdi:solar-power"
        state: >-
          {% set avgfuture = states('sensor.7_daags_gemiddelde_verwachte_zonneopbrengst') | round(1) %}
          {% set avgpast = states('sensor.7_daags_gemiddelde_zonneopbrengst') | round(1) %}
          {% set today = states('sensor.solar_sim_energy_today') | round(1) %}
          {{ today * ( avgpast / avgfuture ) | round(1) }}

      - name: solar_sim_energy_tomorrow_adj
        # zonneproductie morgen met aangepaste waarden
        unit_of_measurement: "kWh"
        attributes:         
          friendly_name: "zonne-energie productie simulatie morgen (gecorrigeerd)"
        icon: "mdi:solar-power"
        state: >-
          {% set avgfuture = states('sensor.7_daags_gemiddelde_verwachte_zonneopbrengst') | round(1) %}
          {% set avgpast = states('sensor.7_daags_gemiddelde_zonneopbrengst') | round(1) %}
          {% set tomorrow = states('sensor.solar_sim_energy_tomorrow') | round(1) %}
          {{ tomorrow * ( avgpast / avgfuture ) | round(1) }}


sensor:
- platform: average
  name: "7-daags gemiddelde verwachte zonneopbrengst"
  duration:
    days: 7
  entities:
    - sensor.solar_sim_energy_today

- platform: average
  name: "7-daags gemiddelde zonneopbrengst"
  duration:
    days: 7
  entities:
    - input_number.solar_production_endofday


    # Code voor het wegfilteren van exuberante waarden
    # https://www.zonstraal.be/forum/viewtopic.php?t=23979&start=45
    # sensor:
    #   - name: PV_Vermogen_AC
    #     unit_of_measurement: W
    #     device_class: power
    #     state: "{% if states('sensor.PV_Vermogen_AC_r') is not none %}
    #                {% if states('sensor.PV_Vermogen_AC_r') | int < 0 %}
    #                   {{ 0 }}
    #                {% else %}
    #                   {{ states('sensor.PV_Vermogen_AC_r') | int }}
    #                {% endif %}
    #              {% else %}
    #                {{ 'error' }}
    #              {% endif %}"

# # Get the sensor value at a specified time
# Do not define the SQL in this config file, but put it in the integration via the GUI
# Do not forget to disable updates in the SQL integration (via systeeminstellingen)
# - platform: sql
#   queries:
#     - name: zonneproductie gisteren op dit uur
#       query: "SELECT state FROM states WHERE entity_id = 'sensor.sma_today' AND CAST(strftime('%s', last_updated) AS integer) > (CAST(strftime('%s', 'now') AS integer) - 86400) ORDER BY last_updated LIMIT 1"
#       column: "state"

- platform: integration
  source: sensor.sma_power_A_channel
  name: solar terraszijde energie
  unit_prefix: k
  method: left
  round: 2

- platform: integration
  source: sensor.sma_power_B_channel
  name: solar voorzijde energie
  unit_prefix: k
  method: left
  round: 2

# net power in W should be converted to kWh to be used for "kwartierpiek"
- platform: integration
  source: sensor.net_power
  name: net power in kWh
  unit_prefix: k
  round: 3

# - platform: command_line
#   name: "solar details"
#   command: "curl -s https://api.forecast.solar/estimate/50.8774/4.7494/25/132/10"
#   scan_interval: 86400  # vernieuw elke 24 uur (24 uur * 60 minuten * 60 seconden)
#   json_attributes:
#     - result

- platform: template
  sensors:
    last_hour_high_wattage:
      friendly_name: "laatste uur > 1200 W zon en volgend uur > 1000 W"
      value_template: >
        {% set ns = namespace(last_time=None, last_watt=0, next_watt=0) %}
        {% set today = now().strftime('%Y-%m-%d') %}
        {% set watts = states.sensor.solar_forecast_watt_raw.attributes.watts %}
        {% set times = watts.keys() | list %}
        {% for time in times %}
          {% if loop.last %}
            {% break %}
          {% endif %}
          {% set watt = watts[time] %}
          {% set next_time = times[loop.index] %}
          {% set next_watt = watts[next_time] %}
          {% if watt > 1000 and next_watt > 800 and time.startswith(today) and (ns.last_time is none or time > ns.last_time) %}
            {% set ns.last_time = time %}
            {% set ns.last_watt = watt %}
            {% set ns.next_watt = next_watt %}
          {% endif %}
        {% endfor %}
        {{ ns.last_time }}
      attribute_templates:
        watt: >
          {{ ns.last_watt }}
        next_hour_watt: >
          {{ ns.next_watt }}


rest:
  - scan_interval: 21600    # 21600 seconds is 6 hours
    resource: https://api.forecast.solar/estimate/50.8774/4.7494/25/132/10
    method: GET
    sensor:
      - name: "Solar Forecast Watt Raw"
        json_attributes_path: "$.result"
        json_attributes:
          - watts
        value_template: 'OK'
      - name: "Solar Forecast Watt Hours Raw"
        json_attributes_path: "$.result"
        json_attributes:
          - watt_hours
        value_template: 'OK'
      - name: "Solar Forecast Watt Hours Day Raw"
        json_attributes_path: "$.result"
        json_attributes:
          - watt_hours_day
        value_template: 'OK'
      - name: "Solar Forecast Watt Hours Period Raw"
        json_attributes_path: "$.result"
        json_attributes:
          - watt_hours_period
        value_template: 'OK'


utility_meter:
  solar_terraszijde_energie_daily:
    source: sensor.solar_terraszijde_energie
    cycle: daily

# quarter-hourly

  solar_terraszijde_energie_monthly:
    source: sensor.solar_terraszijde_energie
    cycle: monthly

  solar_voorzijde_energie_daily:
    source: sensor.solar_voorzijde_energie
    cycle: daily

  solar_voorzijde_energie_monthly:
    source: sensor.solar_voorzijde_energie
    cycle: monthly    

  net_injection_savings_monthly:
    source: sensor.net_injection_savings
    cycle: monthly

  solar_selfconsumption_savings_monthly:
    source: sensor.solar_selfconsumption_savings
    cycle: monthly

  net_injection_savings_yearly:
    source: sensor.net_injection_savings
    cycle: yearly

  solar_selfconsumption_savings_yearly:
    source: sensor.solar_selfconsumption_savings
    cycle: yearly
    
  net_consumption_daily:
    source: sensor.net_consumption_energy_total
    cycle: daily

  net_injection_daily:
    unique_id: '777f5014-d5e3-4b88-af36-f6583325c10f'
    source: sensor.net_injection_energy_total
    cycle: daily

##############################################
# sensor.net_energy wordt niet gebruikt
##############################################

  net_energy_daily:
    unique_id: '003c3f3c-5a3e-495b-81d6-2d74ea356b57'
    source: sensor.net_energy
    cycle: daily

  net_energy_monthly:
    unique_id: '7ad9df31-7589-4331-83fe-60a11675763a'  
    source: sensor.net_energy
    cycle: monthly

  net_energy_yearly:
    unique_id: '4b4078f6-b1e6-4f73-9ac7-3968369ddeae'  
    source: sensor.net_energy
    cycle: yearly

##############################################


  solar_energy_daily:
    unique_id: 'fde4c082-6b5d-43c6-9988-c7f3d25b4152'
    source: sensor.zonne_energie_totaal
    cycle: daily

  solar_energy_weekly:
    unique_id: '7b40b4bd-cc07-433d-9d3e-6229123999fa'
    source: sensor.zonne_energie_totaal
    cycle: weekly

  solar_energy_monthly:
    unique_id: '45ac36a8-d58e-4d64-b08a-45a6b6acca7e'
    source: sensor.zonne_energie_totaal 
    cycle: monthly

  solar_energy_yearly:
    unique_id: '7b459a97-69ab-407a-a9c5-cae18ace8772'
    source: sensor.zonne_energie_totaal 
    cycle: yearly

  realised_sun_production_today:
    unique_id: 'aa95f490-df7d-4c80-b798-33225a1afe4d'  
    source: sensor.gerealiseerde_zonneproductie
    cycle: daily


input_number:
  solar_production_endofday:
    name: zonneproductie einde dag
    min: 0
    max: 100
    unit_of_measurement: kWh

  min_wattage_ontvochtiger_master_bedroom:
    min: 0
    max: 500
    step: 10
    icon: mdi:flash

  min_wattage_ontvochtiger_badkamer:
    min: 0
    max: 500
    step: 10
    icon: mdi:flash

  min_wattage_auto:
    min: 0
    max: 5000
    step: 100
    icon: mdi:flash

  min_wattage_living_airco:
    min: 0
    max: 3000
    step: 100
    icon: mdi:flash      

input_select:
  load_priority_1:
    options:
      - 'ontvochtiger master bedroom'
      - 'ontvochtiger badkamer'
      - 'auto'
      - 'living airco'
      - 'Alunya airco'
      - 'Amilya airco'
      - 'master bedroom airco'

  load_priority_2:
    options:
      - 'ontvochtiger master bedroom'
      - 'ontvochtiger badkamer'
      - 'auto'
      - 'living airco'
      - 'Alunya airco'
      - 'Amilya airco'
      - 'master bedroom airco'    

  load_priority_3:
    options:
      - 'ontvochtiger master bedroom'
      - 'ontvochtiger badkamer'
      - 'auto'
      - 'living airco'
      - 'Alunya airco'
      - 'Amilya airco'
      - 'master bedroom airco'    

  load_priority_4:
    options:
      - 'ontvochtiger master bedroom'
      - 'ontvochtiger badkamer'
      - 'auto'
      - 'living airco'
      - 'Alunya airco'
      - 'Amilya airco'
      - 'master bedroom airco'     


